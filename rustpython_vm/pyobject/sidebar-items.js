initSidebarItems({"enum":[["PyObjectKind","Rather than determining the type of a python object, this enum is more a holder for the rust payload of a python object. It is more a carrier of rust data for a particular python object. Determine the python type by using for example the `.typ()` method on a python object."]],"fn":[["create_type",""]],"struct":[["PyContext",""],["PyFuncArgs","The `PyFuncArgs` struct is one of the most used structs then creating a rust function that can be called from python. It holds both positional arguments, as well as keyword arguments passed to the function."],["PyObject","This is an actual python object. It consists of a `typ` which is the python class, and carries some rust payload optionally. This rust payload can be a rust float or rust int in case of float and int objects."],["Scope",""]],"trait":[["AttributeProtocol",""],["DictProtocol",""],["FromPyObjectRef",""],["IdProtocol",""],["ParentProtocol",""],["TypeProtocol",""]],"type":[["PyObjectRef","The `PyObjectRef` is one of the most used types. It is a reference to a python object. A single python object can have multiple references, and this reference counting is accounted for by this type. Use the `.clone()` method to create a new reference and increment the amount of references to the python object by 1."],["PyObjectWeakRef","Same as PyObjectRef, except for being a weak reference."],["PyRef",""],["PyResult","Use this type for function which return a python object or and exception. Both the python object and the python exception are `PyObjectRef` types since exceptions are also python objects."]]});